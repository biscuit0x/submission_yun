
Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000767  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  0000096b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bb  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <time_i>:
#include <util/delay.h>

volatile int val = 0; //adc value

void time_i(void) { //timer1 setup
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) |(1<<WGM11) ; //fast timer
  90:	82 ea       	ldi	r24, 0xA2	; 162
  92:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
TCCR1B = (1<<WGM13) |(1<<WGM12) |(1<<CS11) |(1<<CS10); //PWM set up w/ prescale = 64
  96:	8b e1       	ldi	r24, 0x1B	; 27
  98:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  9c:	08 95       	ret

0000009e <adc_i>:
}

void adc_i(void) {
	ADCSRA |= (1<<ADEN)| (1<<ADPS2)| (1<<ADPS1)| (1<<ADPS0);//prescale = 128 
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	87 68       	ori	r24, 0x87	; 135
  a6:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //reference voltage
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <main>:
}


int main(void)
{
	adc_i(); // initialize adc and timer
  b4:	0e 94 4f 00 	call	0x9e	; 0x9e <adc_i>
	time_i();
  b8:	0e 94 48 00 	call	0x90	; 0x90 <time_i>
	while (1) //loop
	{
		ADCSRA |= (1<<ADSC); //conversion
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0); 
		ADCSRA |= (1<<ADIF); //reset
		ICR1 = 4999; //50Hz
  c0:	46 e8       	ldi	r20, 0x86	; 134
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	27 e8       	ldi	r18, 0x87	; 135
  c6:	33 e1       	ldi	r19, 0x13	; 19
		DDRB |= (1<<PB1); //PB1 as output
		OCR1A = ADC; 
  c8:	c8 e7       	ldi	r28, 0x78	; 120
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	08 e8       	ldi	r16, 0x88	; 136
  ce:	10 e0       	ldi	r17, 0x00	; 0
{
	adc_i(); // initialize adc and timer
	time_i();
	while (1) //loop
	{
		ADCSRA |= (1<<ADSC); //conversion
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0); 
  d6:	80 81       	ld	r24, Z
  d8:	84 ff       	sbrs	r24, 4
  da:	fd cf       	rjmp	.-6      	; 0xd6 <main+0x22>
		ADCSRA |= (1<<ADIF); //reset
  dc:	80 81       	ld	r24, Z
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	80 83       	st	Z, r24
		ICR1 = 4999; //50Hz
  e2:	da 01       	movw	r26, r20
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	3c 93       	st	X, r19
  e8:	2e 93       	st	-X, r18
		DDRB |= (1<<PB1); //PB1 as output
  ea:	21 9a       	sbi	0x04, 1	; 4
		OCR1A = ADC; 
  ec:	88 81       	ld	r24, Y
  ee:	99 81       	ldd	r25, Y+1	; 0x01
  f0:	d8 01       	movw	r26, r16
  f2:	11 96       	adiw	r26, 0x01	; 1
  f4:	9c 93       	st	X, r25
  f6:	8e 93       	st	-X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	bf ef       	ldi	r27, 0xFF	; 255
  fa:	61 ee       	ldi	r22, 0xE1	; 225
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	b1 50       	subi	r27, 0x01	; 1
 100:	60 40       	sbci	r22, 0x00	; 0
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x4a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x54>
 108:	00 00       	nop
 10a:	e2 cf       	rjmp	.-60     	; 0xd0 <main+0x1c>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
