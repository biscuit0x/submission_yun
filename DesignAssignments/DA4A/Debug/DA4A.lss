
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078e  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c6  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000312  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bc  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009e  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  88:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_pwm>:



volatile int val, power = 0; //val value and power on/off state
void init_pwm(void) {
	DDRD |= (1<<PORTD6);
  90:	56 9a       	sbi	0x0a, 6	; 10
	DDRC |= (1<<PORTC1); 
  92:	39 9a       	sbi	0x07, 1	; 7
	TCCR0A |=
  94:	84 b5       	in	r24, 0x24	; 36
  96:	83 68       	ori	r24, 0x83	; 131
  98:	84 bd       	out	0x24, r24	; 36
	(1<<WGM01)| 
	(1<<WGM00)| 
	(1<<COM0A1);
	PCMSK1 |= (1<<PCINT9); 
  9a:	ec e6       	ldi	r30, 0x6C	; 108
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1); 
  a4:	e8 e6       	ldi	r30, 0x68	; 104
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	80 83       	st	Z, r24
	TCCR0B |=
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	85 bd       	out	0x25, r24	; 37
  b4:	08 95       	ret

000000b6 <init_adc>:
	(1<<CS00); 
	
}

void init_adc(void) {
	DDRC &= (0<<PORTC0);  //adc initialization
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC1); 
  ba:	41 9a       	sbi	0x08, 1	; 8
	ADMUX |= (1<<REFS0); 
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
	ADCSRA |= 
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	87 68       	ori	r24, 0x87	; 135
  ce:	80 83       	st	Z, r24
	(1<<ADEN)| 
	(1<<ADPS2)| 
	(1<<ADPS1)|
	(1<<ADPS0); // prescaler = 128
	sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <main>:
}

int main(void)
{
    init_adc(); // initialization
  d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <init_adc>
	init_pwm(); 
  d8:	0e 94 48 00 	call	0x90	; 0x90 <init_pwm>
    while (1) 
    {
		if (power == 1) {
			ADCSRA |= (1<<ADSC); 
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
			while((ADCSRA&(1<<ADIF))==0); //wait for conversion
			ADCSRA |= (1<<ADIF); //reset
			val = ADC; // store ADC to val for debugging
  e0:	a8 e7       	ldi	r26, 0x78	; 120
  e2:	b0 e0       	ldi	r27, 0x00	; 0
{
    init_adc(); // initialization
	init_pwm(); 
    while (1) 
    {
		if (power == 1) {
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	b1 f4       	brne	.+44     	; 0x11c <main+0x48>
			ADCSRA |= (1<<ADSC); 
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
			while((ADCSRA&(1<<ADIF))==0); //wait for conversion
  f6:	80 81       	ld	r24, Z
  f8:	84 ff       	sbrs	r24, 4
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <main+0x22>
			ADCSRA |= (1<<ADIF); //reset
  fc:	80 81       	ld	r24, Z
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	80 83       	st	Z, r24
			val = ADC; // store ADC to val for debugging
 102:	8d 91       	ld	r24, X+
 104:	9c 91       	ld	r25, X
 106:	11 97       	sbiw	r26, 0x01	; 1
 108:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <val+0x1>
 10c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <val>
			OCR0A = (224/1024)*val; //max speed = 95% of PMW
 110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <val>
 114:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <val+0x1>
 118:	17 bc       	out	0x27, r1	; 39
 11a:	e4 cf       	rjmp	.-56     	; 0xe4 <main+0x10>
		}
		else
			OCR0A = 0;
 11c:	17 bc       	out	0x27, r1	; 39
 11e:	e2 cf       	rjmp	.-60     	; 0xe4 <main+0x10>

00000120 <__vector_4>:
    }
}

//PC1 = power button 
ISR(PCINT1_vect) { 
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
	if(!(PINC & (1 << PINC1))) { 
 130:	31 99       	sbic	0x06, 1	; 6
 132:	15 c0       	rjmp	.+42     	; 0x15e <__vector_4+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	81 ee       	ldi	r24, 0xE1	; 225
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <__vector_4+0x1a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__vector_4+0x24>
 144:	00 00       	nop
		_delay_ms(100); 
		while(!(PINC&(1<<PINC1))); 
 146:	31 9b       	sbis	0x06, 1	; 6
 148:	fe cf       	rjmp	.-4      	; 0x146 <__vector_4+0x26>
		power ^= 1; //toggle power
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	82 27       	eor	r24, r18
 156:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
